배열을 같이 배울 때 문자열도 같이 공부하는게 좋다.
2차원 배열 : 배열 안에 배열 -> 잘 쓰지 않는다 ->메모리 효율이 좋지 않음 -> 이거말고 "클래스"를 쓴다.  -> 이차원배열은 "행"부터 접근하고 두번쨰는 "열"로 접근하자
4차원 -> 의 면 행 열

	1차원 배열을 여러 개 선언할 때 관리하기 힘들기 때문에
  	 2차원 배열을 한 번 선언한다.
   
   	※ 2차원 배열부터는 메모리 낭비가 심하므로 선호하지 않는다.

	2차원 배열 선언
   	자료형[][] 배열명 = {{값1, 값2, 값3,...}, {값4, 값5, 값6,...}};
   	자료형[][] 배열명 = new 자료형[행][열];
   	자료형[][] 배열명 = null;


   	int[][] arrData = new int[2][3];

   	□   		arrData      arrData.length(행의 길이)
  □□   		arrData[행]   arrData[행].length(열의 길이)
   □□□ □□□   		arrData[행][열]
=================================================================================================================
메소드
	이름 뒤에 소괄호
	단, 키워드 뒤에서 소괄호가 메소드가 아니다.(if, switch ....)
매개변수 -> 함수랑 함수를 연결해주는것 -> ex) 결혼 중매하는 분들

	f	(x)     	= 	2x+1
     메소드 이름  매개변수  		리턴값

메소드 선언
	(1)리턴타입 (2)메소드명(자료형 (3)매개변수명, ...) {
		(4)실행할 문장;
		(5)return 리턴값;
	}

	(1) 리턴 값이 있다면 리턴 값의 자료형을 작성하고, 리턴 값이 없다면 비워놓지 않고 void를 작성한다.
	(2) 동사로 작성한다(연필(매개변수)을 쓴다(메소드)).
	(3) 외부에서 전달받을 값이 있다면, 자료형과 순서에 맞게 선언해준다.
	     생략 시, 외부에서 값을 전달받을 수 없게 된다.
	(4) 생략이 가능하다. 메소드의 기능을 구현하는 로직을 작성한다.
	(5) 생략이 가능하다. 리턴값이 있다면, 사용한 부분 통채로를 리턴값으로 봐야한다.

메소드 선언 순서
	문제) 두 정수의 덧셈 메소드 선언
	
 1. 메소드 이름을 생각한다.
	add(){}

 2. 매개변수를 생각한다.
	add(int number1, int number2){}

 3. 실행할 문장을 작성한다.
	add(int number1, int number2){
		int result = number1 + number2;	
	}

 4 . 리턴 값을 작성한다.
	add(int number1, int number2){
		int result = number1 + number2;
		return result;	
	}

 5. 리턴타입을 결정한다.
        	int add(int number1, int number2){
		int result = number1 + number2;
		return result;	
	}

메소드 주의사항
	메소드를 선언할 때에는 {}(중괄호)가 있으며, 반드시 메소드 밖에서 선언한다.
	메소드를 사용할 때에는 {}(중괄호)가 없으며, 반드시 메소드 안에서 사용한다.

static을 보이는 순간 -> 컴파일을 하면 가장먼저 메모리가 할당된다.	
***staic도 heap, new 도 heap에 저장되니 같이 할수 있다 -> static을 안써도 됨

설날떄 덧셈 사칙연산, 배열 알아와야 된다 (main 메소드). 공부, static에 관련된거 알아오쟈

다음 수업때 실제 실무에 어떻게 쓰이는지 알려줌













